" -----------------------------------------------------------------------------
"  < 判断是终端还是 Gvim >
" -----------------------------------------------------------------------------
    if has("gui_running")
        let g:isGUI = 1
    else
        let g:isGUI = 0
    endif

"   Platform
" -----------------------------------------------------------------------------
"  < 判断操作系统是否是 Windows 还是 Linux >
" 如果是在Linux，该文件重命名为 ~/.vimrc（$HOME$/.vimrc）
" 如果是在Windows下，该文件重命名为（$HOME$\_vimrc）
" 个人个性化配置文件夹目录为变量 g:ywl_path
" ----------------------------------------------------------------------------- 
    function! MySys()
        if(has("win32") || has("win64") || has("win95") || has("win16"))
          return "windows"
        else
          return "linux"
      endif
    endfunction

"   设置不同系统下的文件分隔符
    if MySys() == "windows"
        let g:ossep='\\'
    elseif MySys() == "linux"
        let g:ossep='/'
    endif

"   设置$VIMFILES变量，设置$HOME变量

    if MySys() == "linux"
        let g:ywl_path = '/home/ywl/Vim_ywl'
        let $VIMFILES  = g:ywl_path.'/vimfiles'
    elseif MySys() == "windows"
        "   个人配置文件夹存放目录
        let g:ywl_path = 'C:\Vim_ywl'
        let $VIMFILES  = g:ywl_path.'\vimfiles'
    endif


"   个人文件夹路径的设定
    if MySys() == "linux"
        set runtimepath=$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after
        set runtimepath+=$HOME/vimfiles,$HOME/vimfiles/after
        " set runtimepath+=$HOME/Dropbox/vimfiles,$HOME/Dropbox/vimfiles/after
    elseif MySys() == "windows"
        set runtimepath=$VIM\vimfiles,$VIMRUNTIME,$VIM\vimfiles\after
        set runtimepath+=$HOME\vimfiles,$HOME\vimfiles\after
        "set runtimepath+=E:\yanweilin\Dropbox\vimfiles,E:\yanweilin\Dropbox\vimfiles\after
        set runtimepath+=$VIMFILES,$VIMFILES\after
    endif	


"   ## - 以后需要解决优化的地方
"   Get out of VI's compatible mode.
    set nocompatible
    filetype off
    " if MySys() == "windows"
        set rtp+=$VIMFILES/bundle/vundle/
        call vundle#rc('$VIMFILES/bundle')
        " let Vundle manage Vundle, required
        Bundle 'gmarik/vundle'
        " Bundle 'tpope/vim-fugitive'
        Bundle 'plasticboy/vim-markdown'
        " Bundle 'taglist.vim' 
    " endif
    filetype plugin indent on " 开启插件

    set fileformats=unix,dos
"   Chinese
if MySys() == "windows"
    set encoding=utf-8
    set langmenu=zh_CN.UTF-8
    language message zh_CN.UTF-8
    set fileencodings=ucs-bom,utf-8,gb18030,cp936,big5,euc-jp,euc-kr,latin1
elseif MySys() == "linux"
    set langmenu=zh_CN.UTF-8
    set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936	
endif


"   Set mapleader
    let mapleader =","
"   Fast edit vimrc
    if MySys() == "linux"
    "   Fast reloading of the .vimrc
        map <silent> <leader>ss :exec 'source '.g:ywl_path.'/_vimrc'<cr>
        map <silent> <leader>rr :source ~/.vimrc<cr>
    "   Fast editing of .vimrc
        map <silent> <leader>ee :exec 'edit '.g:ywl_path.'/_vimrc'<cr>
        map <silent> <leader>er :e ~/.vimrc<cr>
    "   When .vimrc is edited, reload it
        " autocmd! bufwritepost _vimrc exec 'source '.g:ywl_path.'/_vimrc'
        " autocmd! bufwritepost .vimrc exec 'source ~/.vimrc'
    elseif MySys() == "windows"
    "   Set helplang
    "   Set helplang=cn
    "   Fast reloading of the _vimrc
        map <silent> <leader>ss :exec 'source '.g:ywl_path.'\_vimrc'<cr>
        map <silent> <leader>rr :source $VIM\_vimrc<cr>
    "   Fast editing of _vimrc
        map <silent> <leader>ee :exec 'edit '.g:ywl_path.'\_vimrc'<cr>
        map <silent> <leader>er :e $VIM\_vimrc<cr>
    "   When _vimrc is edited, reload it
        " autocmd! bufwritepost _vimrc exec 'source $VIM\_vimrc'
    "   Open my note about Vim
    endif




"	For windows version, using gVIM with Cygwin on a Windows PC
if MySys() == "windows"
"   source $VIMRUNTIME/mswin.vim
"   behave mswin
"	unmap <C-A>
    set diffexpr=MyDiff()
    function! MyDiff()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        let eq = ''
        if $VIMRUNTIME =~ ' '
            if &sh =~ '/<cmd'
                let cmd = '""' . $VIMRUNTIME . '/diff"'
                let eq = '"'
            else
                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '/diff"'
            endif
        else
            let cmd = $VIMRUNTIME . '/diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
endif

if MySys() == "windows"
        exec 'source '.g:ywl_path.'\_vimrc'
elseif MySys() == "linux"
        exec 'source '.g:ywl_path.'/_vimrc'
endif
