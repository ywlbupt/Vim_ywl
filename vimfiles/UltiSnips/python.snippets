priority -45

global !p

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'

def triple_quotes_handle_trailing(snip, quoting_style):
	"""
	Generate triple quoted strings and handle any trailing quote char,
	which might be there from some autoclose/autopair plugin,
	i.e. when expanding ``"|"``.
	"""
	if not snip.c:
		# Do this only once, otherwise the following error would happen:
		# RuntimeError: The snippets content did not converge: â€¦
		_, col = vim.current.window.cursor
		line = vim.current.line

		# Handle already existing quote chars after the trigger.
		_ret = quoting_style * 3
		while True:
			try:
				nextc = line[col]
			except IndexError:
				break
			if nextc == quoting_style and len(_ret):
				_ret = _ret[1:]
				col = col+1
			else:
				break
		snip.rv = _ret
	else:
		snip.rv = snip.c

def triple_quotes(snip):
	style = snip.opt("g:ultisnips_python_triple_quoting_style")
	if not style:
		return get_quoting_style(snip) * 3
	return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3

def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

endglobal

snippet "" "triple quoted string (double quotes)" b
""" ${1:${VISUAL:dox}}
`!p triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet '' "triple quoted string (single quotes)" b
''' ${1:${VISUAL:dox}}
`!p triple_quotes_handle_trailing(snip, "'")`
endsnippet

snippet dox "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)` ${1:${VISUAL:dox}}
`!p snip.rv = triple_quotes(snip)`
endsnippet
